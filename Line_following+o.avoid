#include <webots/Robot.hpp>
#include <webots/Motor.hpp>
#include <webots/DistanceSensor.hpp>
#include <string>

#define TIME_STEP 64
#define MAX_SPEED 3
#define OBSTACLE_THRESHOLD 100
#define TURN_SPEED 0.5
#define STRAIGHT_SPEED 0.8
#define TURN_TIME 50
#define STRAIGHT_TIME 100
#define SEARCH_TIME 200

using namespace webots;

enum State {
  FOLLOW_LINE,
  AVOID_OBSTACLE,
  RETURN_TO_LINE
};

void run_robot(Robot *robot) {
  // Initialize motors
  Motor *left_motor = robot->getMotor("left wheel motor");
  Motor *right_motor = robot->getMotor("right wheel motor");

  left_motor->setPosition(INFINITY);
  right_motor->setPosition(INFINITY);
  
  left_motor->setVelocity(0.0);
  right_motor->setVelocity(0.0);
  
  // Initialize IR sensors for line following
  DistanceSensor *left_ir = robot->getDistanceSensor("ir0");
  DistanceSensor *right_ir = robot->getDistanceSensor("ir1");

  left_ir->enable(TIME_STEP);
  right_ir->enable(TIME_STEP);

  // Initialize proximity sensors for obstacle avoidance
  DistanceSensor *ps[6];
  ps[0] = robot->getDistanceSensor("ps0");
  ps[1] = robot->getDistanceSensor("ps1");
  ps[2] = robot->getDistanceSensor("ps2");
  ps[3] = robot->getDistanceSensor("ps5");
  ps[4] = robot->getDistanceSensor("ps6");
  ps[5] = robot->getDistanceSensor("ps7");
  
  for (int i = 0; i < 6; i++) {
    ps[i]->enable(TIME_STEP);
  }

  // Initial state
  State state = FOLLOW_LINE;
  int counter = 0;

  // Main loop
  while (robot->step(TIME_STEP) != -1) {
    double left_speed = MAX_SPEED;
    double right_speed = MAX_SPEED;
    
    // Read IR sensors for line following
    double left_ir_val = left_ir->getValue();
    double right_ir_val = right_ir->getValue();

    bool line_left = (4 < left_ir_val) && (left_ir_val < 15);
    bool line_right = (4 < right_ir_val) && (right_ir_val < 15);

    // Read proximity sensors for obstacle avoidance
    bool obstacle_detected = false;
    int obstacle_side = 0; // 0 = no obstacle, 1 = left, 2 = right
    for (int i = 0; i < 3; i++) {
      if (ps[i]->getValue() > OBSTACLE_THRESHOLD) {
        obstacle_detected = true;
        obstacle_side = 2;
        break;
      }
    }
    for (int i = 3; i < 6; i++) {
      if (ps[i]->getValue() > OBSTACLE_THRESHOLD) {
        obstacle_detected = true;
        obstacle_side = 1;
        break;
      }
    }

    switch (state) {
      case FOLLOW_LINE:
        if (obstacle_detected) {
          state = AVOID_OBSTACLE;
          counter = TURN_TIME;
        } else {
          if ((left_ir_val > right_ir_val) && line_left) {
            left_speed = MAX_SPEED * 0.25;
          } else if ((right_ir_val > left_ir_val) && line_right) {
            right_speed = MAX_SPEED * 0.25;
          }
        }
        break;

      case AVOID_OBSTACLE:
        if (counter > 0) {
          // Turn to avoid obstacle
          if (obstacle_side == 1) {
            left_speed = MAX_SPEED * TURN_SPEED;
            right_speed = -MAX_SPEED * TURN_SPEED;
          } else {
            left_speed = -MAX_SPEED * TURN_SPEED;
            right_speed = MAX_SPEED * TURN_SPEED;
          }
          counter--;
        } else {
          state = RETURN_TO_LINE;
          counter = SEARCH_TIME;
        }
        break;

      case RETURN_TO_LINE:
        if (line_left || line_right) {
          state = FOLLOW_LINE;
        } else {
          if (counter > 0) {
            // Move forward to find the line
            left_speed = MAX_SPEED * 0.5;
            right_speed = MAX_SPEED * 0.5;
            counter--;
          } else {
            // If line not found, turn to search
            left_speed = MAX_SPEED * 0.25;
            right_speed = -MAX_SPEED * 0.25;
            counter = SEARCH_TIME;
          }
        }
        break;
    }

    // Set motor speeds
    left_motor->setVelocity(left_speed);
    right_motor->setVelocity(right_speed);
  }
}

int main(int argc, char **argv) {
  Robot *robot = new Robot();
  run_robot(robot);
  delete robot;
  return 0;
}

